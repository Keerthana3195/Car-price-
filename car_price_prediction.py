# -*- coding: utf-8 -*-
"""Car Price Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cfVMCRon1nuxx2GEmUFL15aWhsSSGHyf
"""

# Import the modules, read the dataset and create a Pandas DataFrame.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the datasetx``
from google.colab import files
uploaded = files.upload()

import io
cars_df = pd.read_csv(io.BytesIO(uploaded['car-prices.csv']))
cars_df.head()

# Get the information on the dataset.
cars_df.info()

"""There are 0 missing or null values in the dataset. Also, a lot of features have non-numeric values.

---

#### Data Cleaning

Extract the name of the manufacturer of a from the column `CarName`.
"""

# Display the first 25 rows of the 'CarName' column.
cars_df['CarName'].head(25)

"""The name of a car follows the name of its manufacturer as illustrated below: 

- `alfa-romero` is the manufacturer of `giulia, stelvio` etc cars, 

- `audi` is the manufacturer of `100 ls, fox` etc cars, 

- `bmw` is the manufacture of `x1, x3` etc cars

and so on.
"""

# Extract the name of the manufactures from the car names and display the first 25 cars to verify whether names are extracted successfully.
car_companies = pd.Series([car.split(" ")[0] for car in cars_df['CarName']], index = cars_df.index)
car_companies.head(25)

"""Add a new column to the `cars_df` DataFrame that stores the company names."""

# Create a new column named 'car_company'. It should store the company names of the cars.
cars_df['car_company'] = car_companies
cars_df.head()

# Get the count of number of the cars sold be each manufacturer in the dataset.
cars_df['car_company'].value_counts()

"""The following manufacturer names are misspelled or not regularised (follows the same case i.e. uppper case or lower case or title case): 

- `vw` and `vokswagen` should be `volkswagen`, 

- `porcshce` should be `porsche`, 

- `toyouta` should be `toyota`, 

- `Nissan` should be `nissan`, 

- `maxda` should be `mazda`

"""

# Replace the misspelled 'car_company' names with their correct names.

# volkswagen
cars_df.loc[(cars_df['car_company'] == "vw") | (cars_df['car_company'] == "vokswagen"), 'car_company'] = 'volkswagen'

# porsche
cars_df.loc[cars_df['car_company'] == "porcshce", 'car_company'] = 'porsche'

# toyota
cars_df.loc[cars_df['car_company'] == "toyouta", 'car_company'] = 'toyota'

# nissan
cars_df.loc[cars_df['car_company'] == "Nissan", 'car_company'] = 'nissan'

# mazda
cars_df.loc[cars_df['car_company'] == "maxda", 'car_company'] = 'mazda'

# Get the count of number of the cars sold for each manufacturer in the dataset again.
cars_df['car_company'].value_counts()

"""Drop the `'CarName'` column as it is of no use."""

# Drop 'CarName' column from the 'cars_df' DataFrame.
cars_df.drop(columns= ['CarName'], axis = 1, inplace = True)

"""---"""

# Extract all the numeric (float and int type) columns from the dataset.
cars_numeric_df = cars_df.select_dtypes(include = ['int64', 'float64'])
cars_numeric_df.head()

# Drop the 'car_ID' column from the 'cars_numeric_df' DataFrame. 
cars_numeric_df.drop(columns = ['car_ID'], axis = 1, inplace = True)
cars_numeric_df.head()

# Get the first five rows of the 'doornumber' and 'cylindernumber' columns.
cars_df[['doornumber', 'cylindernumber']].head(5)

"""Notice that the `doornumber` and `cylindernumber` columns are supposed to have numeric type values. But the numbers are reported in the words. So, we need to replace these words with the corresponding numbers. """

# Count the occurrence of each value in the 'cylindernumber' column.
cars_df['cylindernumber'].value_counts()

# Count the occurrence of each value in the 'doornumber' column.
cars_df['doornumber'].value_counts()

"""--- """

# Map the values of the 'doornumber' and 'cylindernumber' columns to their corresponding numeric values.
words_dict = {"two": 2, "three": 3, "four": 4, "five": 5, "six": 6, "eight": 8, "twelve": 12}
def num_map(series):
    return series.map(words_dict)

# Applying the function to the two columns
cars_df[['cylindernumber', 'doornumber']] = cars_df[['cylindernumber', 'doornumber']].apply(num_map, axis = 1)

# Display the first five rows of the 'cylindernumber' and 'doornumber' columns. Also, check whether the data-types are integer or not.
print(cars_df[['cylindernumber', 'doornumber']].head())
print(cars_df[['cylindernumber', 'doornumber']].info())

"""---"""

# Get the counts of each of the values in the 'carbody' column.
cars_df['carbody'].value_counts()

# Create dummy variables for the 'carbody' columns.
car_body_dummies = pd.get_dummies(cars_df['carbody'], dtype = int)
car_body_dummies

# Check whether the data-types for these dummy columns is integer or not.
car_body_dummies.info()

# Create dummy variables for the 'carbody' columns with 1 column less.
car_body_new_dummies = pd.get_dummies(cars_df['carbody'], drop_first = True, dtype = int)
car_body_new_dummies

# Create a DataFrame containing all the non-numeric type features.
cars_categorical_df = cars_df.select_dtypes(include = ['object'])
cars_categorical_df.head()

# Get dummy variables for all the categorical type columns using the dummy coding process.
cars_dummies_df = pd.get_dummies(cars_categorical_df, drop_first = True, dtype = int)
cars_dummies_df.head()

# Drop the categorical type columns from the 'cars_df' DataFrame.
cars_df.drop(list(cars_categorical_df.columns), axis = 1, inplace = True)

"""Now, let's concatenate the `cars_df` and `cars_dummies_df` DataFrames"""

# Concatenate the 'cars_df' and 'cars_dummies_df' DataFrames.
cars_df = pd.concat([cars_df, cars_dummies_df], axis = 1)
cars_df.head()

"""Let's drop the `car_ID` column from the `cars_df` DataFrame. We don't need it to build a linear regression model."""

# Drop the 'car_ID' column
cars_df.drop('car_ID', axis = 1, inplace = True)

# Get the data-types of all the columns and the number of rows and columns in the 'cars_df' DataFrame.
cars_df.info()

# Download the dataset
from google.colab import files

cars_df.to_csv('Car Dataset.csv', index=False)
files.download('Car Dataset.csv')

"""Now, we have 60 columns and all of them have numeric type values."""